<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leisure Moment</title>
  
  <subtitle>乱花渐欲迷人眼，浅草才能没马蹄。最爱湖东行不足，绿杨阴里白沙堤。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://truejasonfans.github.io/"/>
  <updated>2018-06-30T16:01:32.511Z</updated>
  <id>http://truejasonfans.github.io/</id>
  
  <author>
    <name>zhong-wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://truejasonfans.github.io/2018/06/30/nginx/"/>
    <id>http://truejasonfans.github.io/2018/06/30/nginx/</id>
    <published>2018-06-30T15:56:09.971Z</published>
    <updated>2018-06-30T16:01:32.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>brew install nginx</p><h1 id="命令集"><a href="#命令集" class="headerlink" title="命令集"></a>命令集</h1><ol><li>启动 nginx</li><li></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>nginx -t 找到配置文件的位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;brew install nginx&lt;/p&gt;
&lt;h1 id=&quot;命令集&quot;&gt;&lt;a href=&quot;#命令集&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在mac上部署flask+mod_wsgi+apache</title>
    <link href="http://truejasonfans.github.io/2018/04/02/deploy-flask-on-mac-0/"/>
    <id>http://truejasonfans.github.io/2018/04/02/deploy-flask-on-mac-0/</id>
    <published>2018-04-02T13:32:47.000Z</published>
    <updated>2018-04-08T15:59:45.238Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装mac brew工具，brew -v 命令测试</li><li>brew install apache2, 安装完会注意log message, 会显示配置文件http.conf文件在哪，我是在/usr/local/etc/httpd/httpd.conf</li><li><p>安装mod_wsgi模块<br>a. ./configure<br>b. make<br>c. make install</p></li><li><p>修改httpd.conf,配置虚拟主机映射到本地。</p></li><li>lsof -i 端口号 检查端口号是否被占用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装mac brew工具，brew -v 命令测试&lt;/li&gt;
&lt;li&gt;brew install apache2, 安装完会注意log message, 会显示配置文件http.conf文件在哪，我是在/usr/local/etc/httpd/httpd.conf
      
    
    </summary>
    
    
      <category term="python" scheme="http://truejasonfans.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://truejasonfans.github.io/2018/04/01/hello-world/"/>
    <id>http://truejasonfans.github.io/2018/04/01/hello-world/</id>
    <published>2018-04-01T13:06:40.074Z</published>
    <updated>2018-04-01T13:06:40.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端学习中的困惑</title>
    <link href="http://truejasonfans.github.io/2017/12/24/frontQuestions/"/>
    <id>http://truejasonfans.github.io/2017/12/24/frontQuestions/</id>
    <published>2017-12-24T07:18:27.000Z</published>
    <updated>2018-04-01T13:06:40.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ol><li><p>为什么vue打包的后静态资源通过浏览器打开是空白页：<a href="https://www.zhihu.com/question/62164638/answer/196212610" title="为什么vue打包后出现后 在浏览器上打开的是空白页?" target="_blank" rel="noopener">https://www.zhihu.com/question/62164638/answer/196212610</a></p></li><li><p>为什么在某机起的http服务，同一子网内的机器访问不了？<br>通常情况下是端口和host的问题，这里注意不能把Host设置为127.0.0.1(设置为回环地址。该地址指电脑本身，主要预留测试本机的TCP/IP协议是否正常。只要使用这个地址发送数据，则数据包不会出现在网络传输过程中）。绑定为0.0.0.0，在服务器中，0.0.0.0指的是本机上的所有IPV4地址，如果一个主机有两个IP地址，192.168.1.1 和 10.1.2.1，并且该主机上的一个服务监听的地址是0.0.0.0,那么通过两个ip地址都能够访问该服务。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Questions&quot;&gt;&lt;a href=&quot;#Questions&quot; class=&quot;headerlink&quot; title=&quot;Questions&quot;&gt;&lt;/a&gt;Questions&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么vue打包的后静态资源通过浏览器打开是空白页：&lt;a href
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://truejasonfans.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Maven在eclipse的配置（解决Plugin execution not covered by lifecycle configuration\:org.apache.maven.pl）</title>
    <link href="http://truejasonfans.github.io/2017/09/18/Maven%E9%85%8D%E7%BD%AE/"/>
    <id>http://truejasonfans.github.io/2017/09/18/Maven配置/</id>
    <published>2017-09-17T16:23:02.000Z</published>
    <updated>2018-04-01T13:06:40.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven在eclipse的配置（解决Plugin-execution-not-covered-by-lifecycle-configuration-org-apache-maven-pl）"><a href="#Maven在eclipse的配置（解决Plugin-execution-not-covered-by-lifecycle-configuration-org-apache-maven-pl）" class="headerlink" title="Maven在eclipse的配置（解决Plugin execution not covered by lifecycle configuration: org.apache.maven.pl）"></a>Maven在eclipse的配置（解决Plugin execution not covered by lifecycle configuration: org.apache.maven.pl）</h1><ol><li>下载Maven binary </li><li>设置MVN_HOME 环境变量， 添加Bin下路径到Path环境变量</li><li><p>修改conf文件下setting.xml,设置为阿里源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开eclipse-&gt;preference-&gt;Maven</p></li><li>修改Installation，自己所装maven路径</li><li>修改User setting, 制定为设置阿里源的setting.xml</li><li>右键maven工程 -&gt; Maven-&gt; Update Project</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Maven在eclipse的配置（解决Plugin-execution-not-covered-by-lifecycle-configuration-org-apache-maven-pl）&quot;&gt;&lt;a href=&quot;#Maven在eclipse的配置（解决Plugin
      
    
    </summary>
    
    
      <category term="java" scheme="http://truejasonfans.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redux同步使用学习</title>
    <link href="http://truejasonfans.github.io/2017/09/18/redux%E5%90%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://truejasonfans.github.io/2017/09/18/redux同步使用学习/</id>
    <published>2017-09-17T16:23:02.000Z</published>
    <updated>2018-04-01T13:06:40.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统mvc-模型"><a href="#传统mvc-模型" class="headerlink" title="传统mvc 模型"></a>传统mvc 模型</h1><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1506364035137&amp;di=a0ecd7857196fff1b9bec39b12cf4e3d&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.uml.org.cn%2Fzjjs%2Fimages%2F2016070733.jpg" alt=""></p><p>缺点：当一个view A(组件）会引起另外一些view B的变化的时候，状态逻辑比会比较散乱，比如 View B的model监听 VIEW A model 的变化</p><h1 id="Redux-模型"><a href="#Redux-模型" class="headerlink" title="Redux 模型"></a>Redux 模型</h1><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509558287821&amp;di=a531d78dc6d05174bfaeb2f6ef8a4dac&amp;imgtype=0&amp;src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F902276%2F201611%2F902276-20161110210030108-692932045.png" alt=""></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><ul><li>行为的抽象</li><li>普通的JS 对象</li><li>必须有一个type</li><li>一般由方法生成</li></ul><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> (&#123;</span><br><span class="line">    type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">    id: nextTodoId++,</span><br><span class="line">    text</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>响应的抽象,只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。   (previousState, action) =&gt; newState<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span></span><br><span class="line"><span class="keyword">const</span> todo = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                id: action.id,</span><br><span class="line">                text: action.text,</span><br><span class="line">                completed: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">            <span class="keyword">if</span> (state.id !== action.id) &#123;</span><br><span class="line">                <span class="keyword">return</span> state</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                completed: !state.completed</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                ...state,</span><br><span class="line">                todo(<span class="literal">undefined</span>, action)</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.map(<span class="function"><span class="params">t</span> =&gt;</span></span><br><span class="line">                todo(t, action)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> undoableTodos = undoable(todos)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> undoableTodos</span><br></pre></td></tr></table></figure></p><h2 id="合成reducer-讲多个reducer合并以方便传入"><a href="#合成reducer-讲多个reducer合并以方便传入" class="headerlink" title="合成reducer 讲多个reducer合并以方便传入"></a>合成reducer 讲多个reducer合并以方便传入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todos <span class="keyword">from</span> <span class="string">'./todos'</span></span><br><span class="line"><span class="keyword">import</span> visibilityFilter <span class="keyword">from</span> <span class="string">'./visibilityFilter'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</span><br><span class="line">  todos,</span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp</span><br></pre></td></tr></table></figure><h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><p>状态树, 状态的“数据库”，<br>Store 有以下职责：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器</li></ul><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(todoApp)</span><br></pre></td></tr></table></figure><h1 id="redux-数据流"><a href="#redux-数据流" class="headerlink" title="redux 数据流"></a>redux 数据流</h1><ol><li>store.dispatch(action)。</li><li>store 调用reducer函数响应</li><li>store 合并多个子reducer输出，合并成一个单一的state树</li><li>Redux store 保存了根 reducer 返回的完整 state 树</li></ol><h1 id="container-与-component-区分"><a href="#container-与-component-区分" class="headerlink" title="container 与 component 区分"></a>container 与 component 区分</h1><p><img src="https://i.imgur.com/Ep9z9Sp.png" alt=""></p><h2 id="component-UI组件"><a href="#component-UI组件" class="headerlink" title="component: UI组件"></a>component: UI组件</h2><p>不含有状态，UI 组件又称为”纯组件”，即它纯函数一样，纯粹由参数决定它的值</p><h2 id="container-容器组建"><a href="#container-容器组建" class="headerlink" title="container: 容器组建"></a>container: 容器组建</h2><ul><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>带有内部状态</li><li>使用 Redux 的 API</li></ul><p>connect 用于从UI组件生成容器组件</p><p>connect方法接受两个参数：mapStateToProps和mapDispatchToProps</p><ul><li>（1）输入逻辑：外部的数据（即state对象）如何转换为 UI 组件的参数</li><li>（2）输出逻辑：用户发出的动作如何变为 Action 对象，从 UI 组件传出去。</li></ul><h2 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps()"></a>mapStateToProps()</h2><p>mapStateToProps是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）state对象到（UI 组件的）props对象的映射关系。</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">  todos: getVisibleTodos(state.todos.present, state.visibilityFilter)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>connect方法可以省略mapStateToProps参数，那样的话，UI 组件就不会订阅Store，就是说 Store 的更新不会引起 UI 组件的更新。</p><hr><h2 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps()"></a>mapDispatchToProps()</h2><p>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</p><h1 id="provider-组件"><a href="#provider-组件" class="headerlink" title="provider 组件"></a>provider 组件</h1><p>connect方法生成容器组件以后，需要让容器组件拿到state对象，才能生成 UI 组件的参数。<br>一种解决方法是将state对象作为参数，传入容器组件。但是，这样做比较麻烦，尤其是容器组件可能在很深的层级，一级级将state传下去就很麻烦。React-Redux 提供Provider组件，可以让容器组件拿到state</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><hr><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncreaseClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Action</span></span><br><span class="line"><span class="regexp">const increaseAction = &#123; type: 'increase' &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Reducer</span></span><br><span class="line"><span class="regexp">function counter(state = &#123; count: 0 &#125;, action) &#123;</span></span><br><span class="line"><span class="regexp">  const count = state.count</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'increase':</span></span><br><span class="line"><span class="regexp">      return &#123; count: count + 1 &#125;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Store</span></span><br><span class="line"><span class="regexp">const store = createStore(counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux state to component props</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    value: state.count</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux actions to component props</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    onIncreaseClick: () =&gt; dispatch(increaseAction)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Connected Component</span></span><br><span class="line"><span class="regexp">const App = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;传统mvc-模型&quot;&gt;&lt;a href=&quot;#传统mvc-模型&quot; class=&quot;headerlink&quot; title=&quot;传统mvc 模型&quot;&gt;&lt;/a&gt;传统mvc 模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://truejasonfans.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何使用webpack构建单页面React应用</title>
    <link href="http://truejasonfans.github.io/2017/06/14/webpack-manual/"/>
    <id>http://truejasonfans.github.io/2017/06/14/webpack-manual/</id>
    <published>2017-06-13T16:00:58.000Z</published>
    <updated>2018-04-01T13:06:40.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><p>打包的入口文件，有几个入口文件就会生成几个bundle文件</p><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>打包后的输出设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output = &#123;</span><br><span class="line">  fileName : [XXX].js // 打包后的文件名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>打包之前的预处理器，处理各种资源文件</p><h3 id="css-loader-amp-style-loader"><a href="#css-loader-amp-style-loader" class="headerlink" title="css loader&amp; style  loader"></a>css loader&amp; style  loader</h3><ul><li>css loader 负责解析css文件</li><li>style loader 负责将css style插入到html中</li></ul><p>如何在webpack打包中包括css打包?</p><ol><li><p><code>loaders:[{ test: /\.css$/, loader: &#39;style-loader!css-loader&#39; },</code><br>]</p></li><li><p>以及在root.js中import/require<br><code>require(&#39;../css/app.css&#39;);</code></p></li></ol><p>语法中的！（感叹号）用来连接link 不同的loader</p><ul><li>url loader 预处理图片资源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loaders:[</span><br><span class="line"> &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>? 用来向loader传入参数，这里表示8192以下用base64转码</p><h3 id="Common-chunk"><a href="#Common-chunk" class="headerlink" title="Common chunk"></a>Common chunk</h3><p>CommonsChunkPlugin<br>将脚本中相同chunk块打包成一个单独的文件的插件</p><h3 id="Webpack配置文件中用到的特殊符号"><a href="#Webpack配置文件中用到的特殊符号" class="headerlink" title="Webpack配置文件中用到的特殊符号"></a>Webpack配置文件中用到的特殊符号</h3><p> ! : loader的连接符号 比如 ‘style-loader!css-loader’</p><p> &amp; : 向loader传递参数</p><h4 id="解决：Cannot-find-module-‘webpack-lib-node-NodeTemplatePlugin"><a href="#解决：Cannot-find-module-‘webpack-lib-node-NodeTemplatePlugin" class="headerlink" title="解决：Cannot find module ‘webpack/lib/node/NodeTemplatePlugin"></a>解决：Cannot find module ‘webpack/lib/node/NodeTemplatePlugin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm remove webpack -g</span><br><span class="line">npm i webpack --save-dev</span><br><span class="line">npm run ./node_modules/.bin/webpack</span><br></pre></td></tr></table></figure><p>一个参考模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&quot;webpack&quot;);</span><br><span class="line">var path = require(&quot;path&quot;);</span><br><span class="line">var HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.join(__dirname),</span><br><span class="line">  entry: &quot;./src/js/root.js&quot;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js?$/,</span><br><span class="line">        exclude: /(node_modules)/,</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [&quot;react&quot;, &quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class="line">          plugins: [&quot;react-html-attrs&quot;] </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpg|jpeg)$/,</span><br><span class="line">        loader: &quot;url-loader?limit=8192&quot;,</span><br><span class="line">        use: [&quot;file-loader&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: path.resolve(__dirname, &quot;./src/js/root.js&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;./dist&quot;),</span><br><span class="line">    filename: &quot;./src/bundle.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.optimize.DedupePlugin(),</span><br><span class="line">    new webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(&#123; mangle: false, sourcemap: false &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &quot;resume-system-front&quot;,</span><br><span class="line">      filename: &quot;app.html&quot;,</span><br><span class="line">      template: &quot;./index.html&quot; //Load a custom template</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;entry&quot;&gt;&lt;a href=&quot;#entry&quot; class=&quot;headerlink&quot; title=&quot;entry&quot;&gt;&lt;/a&gt;entry&lt;/h2&gt;&lt;p&gt;打包的入口文件，有几个入口文件就会生成几个bundle文件&lt;/p&gt;
&lt;h2 id=&quot;output&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://truejasonfans.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理</title>
    <link href="http://truejasonfans.github.io/2017/06/09/css-learning/"/>
    <id>http://truejasonfans.github.io/2017/06/09/css-learning/</id>
    <published>2017-06-08T16:17:27.000Z</published>
    <updated>2018-04-01T13:06:40.076Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2053209-3b0d0fd9b8621146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="css-盒子模型"><a href="#css-盒子模型" class="headerlink" title="css 盒子模型"></a>css 盒子模型</h3><p><img src="http://upload-images.jianshu.io/upload_images/2053209-6c70f2e96a08b509.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-25389b6a34185752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>内容(content)</li><li>边框(border): 产生内边距padding和外边距margin</li><li>margin 到边距是透明的</li></ul><hr><h4 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h4><p>1.后代选择器（只有符合上下关系）<br>选中<code>&lt;li&gt;</code>标签下的<code>&lt;strong&gt;</code>标签<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li strong &#123;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    font-weight: normal;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>2.子元素选择器<br>不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素<br><code>h1 &gt; strong {color:red;}</code><br>只作用域第一个strong而不作用于第二个，因为第二个不是直接的子元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;This is &lt;strong&gt;very&lt;/strong&gt; &lt;strong&gt;very&lt;/strong&gt; important.&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;This is &lt;em&gt;really &lt;strong&gt;very&lt;/strong&gt;&lt;/em&gt; important.&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>3.相邻元素选择器<br>相邻兄弟选择器使用了加号（+），即相邻兄弟结合符（Adjacent sibling combinator）(用一个结合符只能选择两个相邻兄弟中的第二个元素)<br><code>li + li {font-weight:bold;}</code>  item2. item3 被选中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;List item 1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;List item 2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;List item 3&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li&gt;List item 1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;List item 2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;List item 3&lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><hr><h3 id="一些难懂的css-特性"><a href="#一些难懂的css-特性" class="headerlink" title="一些难懂的css 特性"></a>一些难懂的css 特性</h3><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>display 属性规定元素应该生成的框的类型,默认值：<br>inline<br>继承性：    no<br>版本：    CSS1<br>JavaScript 语法：    object.style.display=”inline”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">none此元素不会被显示。</span><br><span class="line">block此元素将显示为块级元素，此元素前后会带有换行符。</span><br><span class="line">inline默认。此元素会被显示为内联元素，元素前后没有换行符。</span><br><span class="line">inline-block行内块元素。（CSS2.1 新增的值）</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2053209-3b0d0fd9b8621146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://truejasonfans.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>java_fx_css</title>
    <link href="http://truejasonfans.github.io/2016/12/18/java-fx-css/"/>
    <id>http://truejasonfans.github.io/2016/12/18/java-fx-css/</id>
    <published>2016-12-18T14:26:48.000Z</published>
    <updated>2018-04-01T13:06:40.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-css-与HTML-css-语法类似"><a href="#java-css-与HTML-css-语法类似" class="headerlink" title="java css 与HTML css 语法类似"></a>java css 与HTML css 语法类似</h3><p>Selector 选择器：</p><ul><li><p># ID (选择某ID的node们)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#closeButton</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>. className(选择定义某个class的node们)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span><span class="selector-id">#closeButton</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择ID既为closeButton又属于button类的node</p><ul><li>归组同样的样式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>等价于：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>, <span class="selector-class">.label</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后代选择器（选择某个类型的后代类型）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选则祖先为hbox类样式的.button样式节点*/</span></span><br><span class="line"><span class="selector-class">.hbox</span> <span class="selector-class">.button</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子节点选择器（选择某个父类型的子类型）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hbox</span> &gt; <span class="selector-class">.button</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>状态选择器也称为伪类型选择器，它会匹配当前所处状态的node，比如匹配拥有focus的，鼠标的hover等等<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="样式皮肤主题的区别-styles-skin-themes"><a href="#样式皮肤主题的区别-styles-skin-themes" class="headerlink" title="样式皮肤主题的区别(styles,skin,themes)"></a>样式皮肤主题的区别(styles,skin,themes)</h3><p>styles 控件级别<br>skin  应用级别<br>themes  操作系统级别</p><hr><h3 id="样式的取名"><a href="#样式的取名" class="headerlink" title="样式的取名"></a>样式的取名</h3><p>Property names in JavaFX styles start with -fx-. For example, the property name font-size in normal CSS<br>styles becomes -fx-font-size in JavaFX CSS style. JavaFX uses a convention to map the style property names<br>to the instance variables. It takes an instance variable; it inserts a hyphen between two words; if the instance variable<br>consists of multiple words, it converts the name to the lowercase and prefixes it with -fx-. For example, for an<br>instance variable named textAlignment, the style property name would be -fx-text-alignment</p><hr><h3 id="直接修改应用样式"><a href="#直接修改应用样式" class="headerlink" title="直接修改应用样式"></a>直接修改应用样式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application.setUserAgentStylesheet(Application.STYLESHEET_CASPIAN);</span><br></pre></td></tr></table></figure><p>setUserAgentStyleSheet方法可以直接替换应用的style.</p><h2 id="内联写法与-样式表单的区别（difference-between-inline-style-and-style-sheet-style"><a href="#内联写法与-样式表单的区别（difference-between-inline-style-and-style-sheet-style" class="headerlink" title="内联写法与 样式表单的区别（difference between inline style and style sheet style)"></a>内联写法与 样式表单的区别（difference between inline style and style sheet style)</h2><h3 id="设置css-样式的优先级"><a href="#设置css-样式的优先级" class="headerlink" title="设置css 样式的优先级"></a>设置css 样式的优先级</h3><ol><li><p>Inline style (the highest priority) 内联写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node.setStyle(<span class="string">"-fx....."</span>);</span><br><span class="line"><span class="comment">//不能重复的setStyle(styleProperty)，以最后一次setStyle为准</span></span><br><span class="line"><span class="comment">//错误的写法</span></span><br><span class="line">    node.setStyle(<span class="string">"-fx-background-color: #9400D3"</span>);</span><br><span class="line">    node.setStyle(<span class="string">"-fx-background-insets: 5"</span>);</span><br><span class="line">    node.setStyle(<span class="string">"-fx-background-radius: 10"</span>);</span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line">    node.setStyle(<span class="string">"-fx-background-color: #9400D3;-fx-background-insets: 5;-fx-background-radius: 0"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Parent style sheets  父节点样式表单</p></li><li>Scene style sheets   场景样式表单</li><li>Values set in the code using JavaFX API(直接API调用: setFont())</li><li>User agent style sheets (the lowest priority)</li></ol><hr><h3 id="css-属性的继承"><a href="#css-属性的继承" class="headerlink" title="css 属性的继承"></a>css 属性的继承</h3><p>Java fx 对于css 属性有两种继承机制：</p><ol><li>一种是继承属性类型 （通过类的继承关系继承）</li><li>一种是继承属性值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CSSInheritance</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Application.launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage stage)</span> </span>&#123;</span><br><span class="line">Button okBtn = <span class="keyword">new</span> Button(<span class="string">"OK"</span>);</span><br><span class="line">Button cancelBtn = <span class="keyword">new</span> Button(<span class="string">"Cancel"</span>);</span><br><span class="line"></span><br><span class="line">HBox root = <span class="keyword">new</span> HBox(<span class="number">10</span>); <span class="comment">// 10px spacing</span></span><br><span class="line">root.getChildren().addAll(okBtn, cancelBtn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set styles for the OK button and its parent HBox</span></span><br><span class="line">root.setStyle(<span class="string">"-fx-cursor: hand;-fx-border-color: blue;-fx-border-width: 5px;"</span>);</span><br><span class="line">okBtn.setStyle(<span class="string">"-fx-border-color: red;-fx-border-width: inherit;"</span>);</span><br><span class="line"></span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(root);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.setTitle(<span class="string">"CSS Inheritance"</span>);</span><br><span class="line">stage.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>![Upload Paste_Image.png failed. Please try again.]</p><h3 id="css-属性值类型"><a href="#css-属性值类型" class="headerlink" title="css 属性值类型"></a>css 属性值类型</h3><ul><li>inherit : fx-xxx: inherit(继承父节点的样式)</li><li>boolean(true or false) : -fx-display-caret: false</li><li>string : -fx-skin:”com.xxx.xxxSkin” </li><li>number : -fx-opacity:0.60</li><li>angle : -fx-rotate:45deg</li><li>point : 用 x,y 表示横纵坐标</li><li>color-stop: 颜色梯度</li><li>URI ：.image-view {-fx-image: url(“<a href="http://jdojo.com/myimage.png&quot;);}" target="_blank" rel="noopener">http://jdojo.com/myimage.png&quot;);}</a>  描述资源位置</li><li>effect ： 阴影效果， 使用dropshadow和innershadow两个css 函数,参数<br>.drop-shadow-1 {-fx-effect: dropshadow(gaussian, gray, 10, 0.6, 10, 10);}</li><li>font type: <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//散开的写法</span><br><span class="line"><span class="selector-class">.my-font-style</span> &#123;</span><br><span class="line"><span class="attribute">-fx-font-family</span>: <span class="string">"serif"</span>;</span><br><span class="line"><span class="attribute">-fx-font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">-fx-font-style</span>: normal;</span><br><span class="line"><span class="attribute">-fx-font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>一句式写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-font-style</span> &#123;</span><br><span class="line"><span class="attribute">-fx-font</span>: italic bolder <span class="number">20px</span> <span class="string">"serif"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>paint<br>A paint type value specifies a color.(定制你的动态颜色）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.my-style &#123;</span><br><span class="line">-fx-fill: linear-gradient(from 0% 0% to 100% 0%, black 0%, red 100%);</span><br><span class="line">-fx-background-color: radial-gradient(radius 100%, black, red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>对于固定的颜色，你可以用<br>Using named colors(已命名定义好的颜色）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-style</span> &#123;</span><br><span class="line"><span class="attribute">-fx-background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using looked-up colors<br>在根节点中定义，然后在子节点中向上查找所得：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line"><span class="attribute">my-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-style</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: my-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using the rgb() and rgba() functions<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用rgb或者rgba*/</span></span><br><span class="line"><span class="selector-class">.my-style-1</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="built_in">rgb</span>(0, 0, 255);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-style-2</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="built_in">rgba</span>(0, 0, 255, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*16进制 */</span></span><br><span class="line"><span class="selector-class">.my-style-3</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 8 进制*/</span></span><br><span class="line"><span class="selector-class">.my-style-4</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="number">#0bc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using the hsb() or hsba() function<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-style-1</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="built_in">hsb</span>(200, 70%, 40%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-style-2</span> &#123;</span><br><span class="line"><span class="attribute">-fx-fill</span>: <span class="built_in">hsba</span>(200, 70%, 40%, 0.30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using color functions: derive() and ladder()<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line"><span class="attribute">my-base-text-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-style</span> &#123;</span><br><span class="line"><span class="attribute">-fx-text-fill</span>: <span class="built_in">ladder</span>(my-base-text-color, white 29%, black 30%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ladder函数依赖于my-base-text-color的光亮程度,低于29%为红色，反之为黑色。</p><h3 id="背景色的几个属性"><a href="#背景色的几个属性" class="headerlink" title="背景色的几个属性"></a>背景色的几个属性</h3><p>-fx-background-color: 背景颜色<br>-fx-background-insets: 背景内边框距离外边框距离<br>-fx-background-radius: 背景边框矩形四个角半径</p><h3 id="边界的几个属性"><a href="#边界的几个属性" class="headerlink" title="边界的几个属性"></a>边界的几个属性</h3><p>-fx-border-color : 边框颜色<br>-fx-border-width ： 边框厚度<br>-fx-border-radius ： 边框圆角半径<br>-fx-border-insets ： 边框距离边界距离（layoutbounds)<br>-fx-border-style: 边框线样式，比如点线：-fx-border-style: dotted</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java-css-与HTML-css-语法类似&quot;&gt;&lt;a href=&quot;#java-css-与HTML-css-语法类似&quot; class=&quot;headerlink&quot; title=&quot;java css 与HTML css 语法类似&quot;&gt;&lt;/a&gt;java css 与HTML cs
      
    
    </summary>
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/categories/java-fx/"/>
    
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/tags/java-fx/"/>
    
  </entry>
  
  <entry>
    <title>java_fx_binding</title>
    <link href="http://truejasonfans.github.io/2016/12/18/java-fx-binding/"/>
    <id>http://truejasonfans.github.io/2016/12/18/java-fx-binding/</id>
    <published>2016-12-18T14:22:37.000Z</published>
    <updated>2018-04-01T13:06:40.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binding在fx的使用"><a href="#Binding在fx的使用" class="headerlink" title="Binding在fx的使用"></a>Binding在fx的使用</h1><hr><h2 id="Binding的概念"><a href="#Binding的概念" class="headerlink" title="Binding的概念"></a>Binding的概念</h2><p><code>soldPrice = listPrice - discounts + taxes</code><br>通过这个表达式，如果你知道listPrice, discounts, taxes, 你是不是很快能计算出soldPrice? 这就是一个binding的关系,反之如果你知道了一个soldPrice,你能推算出其他3项吗？答案是no. 这里为我们揭示了binding中存在方向的概念，是单向 or 双向。</p><hr><h3 id="NumberBinding"><a href="#NumberBinding" class="headerlink" title="NumberBinding"></a>NumberBinding</h3><ol><li>利用property对象返回一个NumberBinding对象,当它的值没有被计算出来，它是invalid:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//NumberBinding</span><br><span class="line">IntegerProperty digit1 = new SimpleIntegerProperty(1);</span><br><span class="line">IntegerProperty digit2 = new SimpleIntegerProperty(2);</span><br><span class="line">NumberBinding numberBinding = digit1.add(digit2);</span><br><span class="line">System.out.println(&quot;sum.isValid(): &quot; + sum.isValid());</span><br><span class="line">System.out.println(sum.getValue());</span><br><span class="line">System.out.println(&quot;sum.isValid(): &quot; + sum.isValid());</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/2053209-12d0a5d087a88344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p> 2.或者它依赖的propery更新的时候，它也会失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digit1.set(3);</span><br><span class="line">System.out.println(&quot;sum.isValid(): &quot; + sum.isValid());</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-01931b910c192303.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><h3 id="Binding-in-String"><a href="#Binding-in-String" class="headerlink" title="Binding in String"></a>Binding in String</h3><ol><li>直接使用property<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringBinding</span></span><br><span class="line">StringProperty str1 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"11"</span>);</span><br><span class="line">StringProperty str2 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"22"</span>);</span><br><span class="line">StringProperty str3 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"33"</span>);</span><br><span class="line">str3.bind(str1.concat(str2));</span><br><span class="line">System.out.println(str3.get());</span><br></pre></td></tr></table></figure></li></ol><p>2.使用StringExpression<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringProperty str1 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"11"</span>);</span><br><span class="line">StringProperty str2 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"22"</span>);</span><br><span class="line">StringExpression desc = str1.concat(str2);</span><br><span class="line">System.out.println(desc .get());</span><br></pre></td></tr></table></figure></p><p>3.使用String binding<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">StringProperty str1 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"11"</span>);</span><br><span class="line">StringProperty str2 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"22"</span>);</span><br><span class="line">StringBinding strBinding = <span class="keyword">new</span> StringBinding() &#123;</span><br><span class="line">              &#123;</span><br><span class="line">              bind(str1.concat(str2));</span><br><span class="line">      &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">computeValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str1.concat(str2).get();</span><br><span class="line">&#125;&#125;;</span><br><span class="line">System.out.println(<span class="string">"StringBinding: + "</span> + strBinding.getValue());</span><br><span class="line">str2.set(<span class="string">"22"</span>);</span><br><span class="line">System.out.println(<span class="string">"StringBinding: + "</span> + strBinding.getValue());</span><br></pre></td></tr></table></figure></p><hr><h3 id="Binding-of-boolean"><a href="#Binding-of-boolean" class="headerlink" title="Binding of boolean"></a>Binding of boolean</h3><p>通过property之间的逻辑方法比较构造。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book b1 = new Book(&quot;J1&quot;, 90, &quot;1234567890&quot;);</span><br><span class="line">Book b2 = new Book(&quot;J2&quot;, 80, &quot;0123456789&quot;);</span><br><span class="line">ObjectProperty&lt;Book&gt; book1 = new SimpleObjectProperty&lt;&gt;(b1);</span><br><span class="line">ObjectProperty&lt;Book&gt; book2 = new SimpleObjectProperty&lt;&gt;(b2);</span><br><span class="line">// Create a binding that computes if book1 and book2 are equal</span><br><span class="line">BooleanBinding isEqual = book1.isEqualTo(book2);</span><br><span class="line">System.out.println(isEqual.get());// false</span><br><span class="line">book2.set(b1);</span><br><span class="line">System.out.println(isEqual.get());// true</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IntegerProperty x = new SimpleIntegerProperty(1);</span><br><span class="line">IntegerProperty y = new SimpleIntegerProperty(2);</span><br><span class="line">IntegerProperty z = new SimpleIntegerProperty(3);</span><br><span class="line">// Create a boolean expression for x &gt; y &amp;&amp; y &lt;&gt; z</span><br><span class="line">BooleanExpression condition = x.greaterThan(y).and(y.isNotEqualTo(z));</span><br><span class="line">System.out.println(condition.get());// false</span><br><span class="line">// Make the condition true by setting x to 3</span><br><span class="line">x.set(3);</span><br><span class="line">System.out.println(condition.get());// true</span><br></pre></td></tr></table></figure><hr><h3 id="单向绑定以及双向绑定"><a href="#单向绑定以及双向绑定" class="headerlink" title="单向绑定以及双向绑定"></a>单向绑定以及双向绑定</h3><h3 id="单向绑定实例-C-A-X-B"><a href="#单向绑定实例-C-A-X-B" class="headerlink" title="单向绑定实例 (C = A X B)"></a>单向绑定实例 (C = A X B)</h3><p>单向绑定只受绑定对象的影响，Binding对象（或这属性）自身的变化不影响绑定对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundProperty</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IntegerProperty x = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">10</span>);</span><br><span class="line">IntegerProperty y = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">20</span>);</span><br><span class="line">IntegerProperty z = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">60</span>);</span><br><span class="line">z.bind(x.add(y));</span><br><span class="line">System.out.println(<span class="string">"After binding z: Bound = "</span> + z.isBound() + <span class="string">", z = "</span></span><br><span class="line">+ z.get());</span><br><span class="line"><span class="comment">// Change x and y</span></span><br><span class="line">x.set(<span class="number">15</span>);</span><br><span class="line">y.set(<span class="number">19</span>);</span><br><span class="line">System.out.println(<span class="string">"After changing x and y: Bound = "</span> + z.isBound()</span><br><span class="line">+ <span class="string">", z = "</span> + z.get());</span><br><span class="line"><span class="comment">// Unbind z</span></span><br><span class="line">z.unbind();</span><br><span class="line"><span class="comment">// Will not affect the value of z as it is not bound to x and y anymore</span></span><br><span class="line">x.set(<span class="number">100</span>);</span><br><span class="line">y.set(<span class="number">200</span>);</span><br><span class="line">System.out.println(<span class="string">"After unbinding z: Bound = "</span> + z.isBound()</span><br><span class="line">+ <span class="string">", z = "</span> + z.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-6f5115a552c75aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><p>###双向绑定<br>双向绑定，改变任何一方，都会触发另一方的改变，给予这种前提（X=Y), 两边必须是同一类型。</p><p>一个简单的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BidirectionalBinding</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IntegerProperty x = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">1</span>);</span><br><span class="line">IntegerProperty y = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">2</span>);</span><br><span class="line">IntegerProperty z = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Before binding:"</span>);</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x.get() + <span class="string">", y="</span> + y.get() + <span class="string">", z="</span> + z.get());</span><br><span class="line"></span><br><span class="line">x.bindBidirectional(y);</span><br><span class="line">System.out.println(<span class="string">"After binding-1:"</span>);</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x.get() + <span class="string">", y="</span> + y.get() + <span class="string">", z="</span> + z.get());</span><br><span class="line"></span><br><span class="line">x.bindBidirectional(z);</span><br><span class="line">System.out.println(<span class="string">"After binding-2:"</span>);</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x.get() + <span class="string">", y="</span> + y.get() + <span class="string">", z="</span> + z.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"After changing z:"</span>);</span><br><span class="line">z.set(<span class="number">19</span>);</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x.get() + <span class="string">", y="</span> + y.get() + <span class="string">", z="</span> + z.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove bindings</span></span><br><span class="line">x.unbindBidirectional(y);</span><br><span class="line">x.unbindBidirectional(z);</span><br><span class="line">System.out.println(<span class="string">"After unbinding and changing them separately:"</span>);</span><br><span class="line">x.set(<span class="number">100</span>);</span><br><span class="line">y.set(<span class="number">200</span>);</span><br><span class="line">z.set(<span class="number">300</span>);</span><br><span class="line">System.out.println(<span class="string">"x="</span> + x.get() + <span class="string">", y="</span> + y.get() + <span class="string">", z="</span> + z.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">![Paste_Image.png](http:<span class="comment">//upload-images.jianshu.io/upload_images/2053209-2c30201f85a812b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line"></span><br><span class="line">### 流式API</span><br><span class="line">流式 API 是Java fx 在Binding提供的福利 API. 通过这些API，可以向DSL 一样描述 依赖关系。</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FluentAPITest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String property</span></span><br><span class="line">StringProperty s1 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"XX"</span>);</span><br><span class="line">StringProperty s2 = <span class="keyword">new</span> SimpleStringProperty(<span class="string">"qq"</span>);</span><br><span class="line">StringExpression s3 = s1.concat(s2);</span><br><span class="line">System.out.println(s3.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Number property</span></span><br><span class="line">IntegerProperty i1 = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">4</span>);</span><br><span class="line">IntegerProperty i2 = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">2</span>);</span><br><span class="line">IntegerProperty i3 = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">2</span>);</span><br><span class="line">IntegerBinding ib = (IntegerBinding) i1.add(i2).subtract(i2).multiply(i2).divide(i3);</span><br><span class="line">System.out.println(ib.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Boolean Property</span></span><br><span class="line">BooleanProperty b1 = <span class="keyword">new</span> SimpleBooleanProperty(<span class="keyword">false</span>);</span><br><span class="line">BooleanProperty b2 = <span class="keyword">new</span> SimpleBooleanProperty(<span class="keyword">true</span>);</span><br><span class="line">BooleanBinding b3 = b1.isEqualTo(b2).isNotEqualTo(b2).not().not();</span><br><span class="line">System.out.println(b3.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-cf3e4fd4730204df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="三元-API-操作"><a href="#三元-API-操作" class="headerlink" title="三元 API 操作"></a>三元 API 操作</h3><p>new When(condition).then(value1).otherwise(value2)<br>condition对象必须实现了ObservableBooleanValue接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TernaryTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IntegerProperty num = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">10</span>);</span><br><span class="line">StringBinding desc = <span class="keyword">new</span> When(num.divide(<span class="number">2</span>).multiply(<span class="number">2</span>).isEqualTo(num)).then(<span class="string">"even"</span>).otherwise(<span class="string">"odd"</span>);</span><br><span class="line">System.out.println(num.get() + <span class="string">" is "</span> + desc.get());</span><br><span class="line">num.set(<span class="number">19</span>);</span><br><span class="line">System.out.println(num.get() + <span class="string">" is "</span> + desc.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-60fb60d4320dfd39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h3 id="Binding-Utility-Class"><a href="#Binding-Utility-Class" class="headerlink" title="Binding Utility Class"></a>Binding Utility Class</h3><p>Bingdings 类中包含之前提及全部流式API(诸如add,sustract,multiply,divide,concat,eqaul 等等).如果你不喜欢用流式API的写法，也可以用通过调用Bindings的方法的来满足你创建所需的binding.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingsClassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DoubleProperty radius = <span class="keyword">new</span> SimpleDoubleProperty(<span class="number">7.0</span>);</span><br><span class="line">DoubleProperty area = <span class="keyword">new</span> SimpleDoubleProperty(<span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind area to an expression that computes the area of the circle</span></span><br><span class="line">area.bind(Bindings.multiply(Bindings.multiply(radius, radius), Math.PI));</span><br><span class="line"><span class="comment">// Create a string expression to describe the circle</span></span><br><span class="line">StringExpression desc = Bindings.format(Locale.US, <span class="string">"Radius = %.2f, Area = %.2f"</span>, radius, area);</span><br><span class="line">System.out.println(desc.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the radius</span></span><br><span class="line">radius.set(<span class="number">14.0</span>);</span><br><span class="line">System.out.println(desc.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2053209-0ce42ae455652888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><h3 id="与UI-之间的binding"><a href="#与UI-之间的binding" class="headerlink" title="与UI 之间的binding"></a>与UI 之间的binding</h3><p>讲了这么多，如果你看过java fx 源码， 你猜到java fx 是如何实现UI 与 Model  的 data binding 吗？<br>其实java fx ui 类 的所有属性 基本上是 实现了property接口的对象。<br>比如 textField的textProperty,再比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChoicBindingExample</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  ObservableList cursors = FXCollections.observableArrayList(</span><br><span class="line">  Cursor.DEFAULT,</span><br><span class="line">  Cursor.CROSSHAIR,</span><br><span class="line">  Cursor.WAIT,</span><br><span class="line">  Cursor.TEXT,</span><br><span class="line">  Cursor.HAND,</span><br><span class="line">  Cursor.MOVE,</span><br><span class="line">  Cursor.N_RESIZE,</span><br><span class="line">  Cursor.NE_RESIZE,</span><br><span class="line">  Cursor.E_RESIZE,</span><br><span class="line">  Cursor.SE_RESIZE,</span><br><span class="line">  Cursor.S_RESIZE,</span><br><span class="line">  Cursor.SW_RESIZE,</span><br><span class="line">  Cursor.W_RESIZE,</span><br><span class="line">  Cursor.NW_RESIZE,</span><br><span class="line">  Cursor.NONE</span><br><span class="line">); </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage stage)</span> </span>&#123;</span><br><span class="line">  ChoiceBox choiceBoxRef = ChoiceBoxBuilder.create()</span><br><span class="line">  .items(cursors)</span><br><span class="line">  .build();</span><br><span class="line">VBox box = <span class="keyword">new</span> VBox();</span><br><span class="line">box.getChildren().add(choiceBoxRef);</span><br><span class="line"><span class="keyword">final</span> Scene scene = <span class="keyword">new</span> Scene(box,<span class="number">300</span>, <span class="number">250</span>);</span><br><span class="line">scene.setFill(<span class="keyword">null</span>);</span><br><span class="line">stage.setScene(scene);</span><br><span class="line">stage.show();</span><br><span class="line">scene.cursorProperty().bind(choiceBoxRef.getSelectionModel().selectedItemProperty());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">launch(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binding在fx的使用&quot;&gt;&lt;a href=&quot;#Binding在fx的使用&quot; class=&quot;headerlink&quot; title=&quot;Binding在fx的使用&quot;&gt;&lt;/a&gt;Binding在fx的使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Binding的概念&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/categories/java-fx/"/>
    
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/tags/java-fx/"/>
    
  </entry>
  
  <entry>
    <title>java_fx_property</title>
    <link href="http://truejasonfans.github.io/2016/12/18/java-fx-property/"/>
    <id>http://truejasonfans.github.io/2016/12/18/java-fx-property/</id>
    <published>2016-12-18T14:21:32.000Z</published>
    <updated>2018-04-01T13:06:40.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="property的概念"><a href="#property的概念" class="headerlink" title="property的概念"></a>property的概念</h1><p>一个property 通常是外部不可见的，在该类之外，我们只能通过get/set这些接口方法实现对其读与修改，我们对其实现细节(setter/getter)不关心也并不需要知道。但是通常我们（view)对它是否改变，从什么值改变成什么值十分关心（view)</p><hr><h2 id="the-kinds-of-feature-in-property-of-java-fx"><a href="#the-kinds-of-feature-in-property-of-java-fx" class="headerlink" title="the kinds of feature in property of java fx"></a>the kinds of feature in property of java fx</h2><ul><li>对于 fx 的property 都是可观察的(observable) 实现了observable 和observableValue接口<br>observable接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">observable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(InvalidationListener listener)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(InvalidationListener listener)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>observalue接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObservableValue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(ChangeListener&lt;? <span class="keyword">super</span> T&gt; paramChangeListener)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(ChangeListener&lt;? <span class="keyword">super</span> T&gt; paramChangeListener)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 它们监听失效(invalid) 和 变化(change) 事件 </p><ul><li><p>Property 可以分为只读的以及可读写的。</p><pre><code>每个Property 类一般提供 : get()/set() and getValue()/setValue 针对primitive type(Read only property don&apos;t provide the set interface.)  getValue/SetValue 针对装箱类型</code></pre></li></ul><p>read-write property is easy to understand, you can read-write it in internal or outside.</p><ul><li>对于只读属性的认识. (read-only for outside and read-write internally)<br>一个ReadOnlyXXXWrapper 类 包裹了两个类型，一个是只读的，一个是可读写的.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReadOnlyIntegerWrapper idWrapper = <span class="keyword">new</span> ReadOnlyIntegerWrapper(<span class="number">100</span>);</span><br><span class="line">ReadOnlyIntegerProperty id = idWrapper.getReadOnlyProperty();</span><br><span class="line">System.out.println(<span class="string">"idWrapper:"</span> + idWrapper.get());</span><br><span class="line">System.out.println(<span class="string">"id:"</span> + id.get());</span><br><span class="line"><span class="comment">// Change the value</span></span><br><span class="line">idWrapper.set(<span class="number">101</span>);</span><br><span class="line">System.out.println(<span class="string">"idWrapper:"</span> + idWrapper.get());</span><br><span class="line">System.out.println(<span class="string">"id:"</span> + id.get());</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="A-Book-Class-同时拥有只读属性和可读写属性的一个实体类"><a href="#A-Book-Class-同时拥有只读属性和可读写属性的一个实体类" class="headerlink" title="A Book Class 同时拥有只读属性和可读写属性的一个实体类"></a>A Book Class 同时拥有只读属性和可读写属性的一个实体类</h2><p>对于可读写属性抽象类型为XXXProperty, 实现类型通常SimpleXXXProperty.对于只读属性抽象类型通常是ReadOnlyXXXProeprty, 实现类型是ReadOnlyXXXWrapper.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringProperty title = <span class="keyword">new</span> SimpleStringProperty(<span class="keyword">this</span>,<span class="string">"title"</span>, <span class="string">"Unknown"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DoubleProperty price = <span class="keyword">new</span> SimpleDoubleProperty(<span class="keyword">this</span>,<span class="string">"price"</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReadOnlyStringWrapper ISBN = <span class="keyword">new</span> ReadOnlyStringWrapper(<span class="keyword">this</span>,<span class="string">"ISBN"</span>, <span class="string">"Unknown"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, <span class="keyword">double</span> price, String ISBN)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title.set(title);</span><br><span class="line"><span class="keyword">this</span>.price.set(price);</span><br><span class="line"><span class="keyword">this</span>.ISBN.set(ISBN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title.set(title);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> StringProperty <span class="title">titleProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getprice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price.set(price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DoubleProperty <span class="title">priceProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getISBN</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ISBN.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ReadOnlyStringProperty <span class="title">ISBNProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ISBN.getReadOnlyProperty();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="Lazily-Instantiating-Property-Objects-（充分优化内存，使用懒加载）"><a href="#Lazily-Instantiating-Property-Objects-（充分优化内存，使用懒加载）" class="headerlink" title="Lazily Instantiating Property Objects （充分优化内存，使用懒加载）"></a>Lazily Instantiating Property Objects （充分优化内存，使用懒加载）</h2><p>只有当需要item的weightProperty被需要的时候(weightProperty（）被调用)初始化property.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> DoubleProperty weight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> _weight = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (weight == <span class="keyword">null</span>) ? _weight : weight.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> newWeight)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (weight == <span class="keyword">null</span>) &#123;</span><br><span class="line">_weight = newWeight;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">weight.set(newWeight);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> DoubleProperty <span class="title">weightProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (weight == <span class="keyword">null</span>) &#123;</span><br><span class="line">weight = <span class="keyword">new</span> SimpleDoubleProperty(<span class="keyword">this</span>, <span class="string">"weight"</span>, _weight);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Tips:<br>使用懒加载或者饥饿加载主要试情况而定， 一个拥有少量属性的类，并且基本你必定会用到属性，那么可以考虑饥饿加载，如果是封装的对象开销过大或者一个类里面封装了许多属性，只有少数会使用到时候可以考虑懒加载来优化内存。</p><hr><h2 id="Property-Class-Hierarchy"><a href="#Property-Class-Hierarchy" class="headerlink" title="Property Class Hierarchy"></a>Property Class Hierarchy</h2><p><img src="http://upload-images.jianshu.io/upload_images/2053209-31c4e3b00a88625c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><hr><h2 id="最好将-property-的getter-setter-声明为final"><a href="#最好将-property-的getter-setter-声明为final" class="headerlink" title="最好将 property 的getter/setter 声明为final"></a>最好将 property 的getter/setter 声明为final</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringProperty title = <span class="keyword">new</span> SimpleStringProperty(<span class="keyword">this</span>,</span><br><span class="line"><span class="string">"title"</span>, <span class="string">"Unknown"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> StringProperty <span class="title">titleProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title.set(title);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="解析property-接口的方法"><a href="#解析property-接口的方法" class="headerlink" title="解析property 接口的方法"></a>解析property 接口的方法</h2><ol><li><p>bind(建立单向绑定)<br>与一个来自于继承泛型T链的实现了observableValue接口的对象（一般为property）相绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(ObservableValue&lt;? extends T&gt; observable)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>bindBidrectional(建立双向绑定)<br>必须与同一类型建立双向绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bindBidirectional</span><span class="params">(Property&lt;T&gt; other)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="对property-对象添加Invalidation-失效-事件监听"><a href="#对property-对象添加Invalidation-失效-事件监听" class="headerlink" title="对property 对象添加Invalidation(失效)事件监听"></a>对property 对象添加Invalidation(失效)事件监听</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main &#123;</span><br><span class="line">IntegerProperty counter = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">100</span>);</span><br><span class="line">couter.set(<span class="number">100</span>) <span class="comment">// 会出发一个invalid事件</span></span><br><span class="line">couter.set(<span class="number">101</span>) <span class="comment">// 不会触发，因为该属性已经失效</span></span><br><span class="line"><span class="keyword">int</span> value = couter.get() <span class="comment">//使属性回复有效</span></span><br><span class="line">couter.set(<span class="number">101</span>) <span class="comment">// 会再出发一个Invalid事件</span></span><br><span class="line"><span class="comment">// Add an invalidation listener to the counter property</span></span><br><span class="line">counter.addListener(InvalidationTest::invalidated);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invalidated</span><span class="params">(Observable prop)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Counter is invalid."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="对property-对象添加change-值改变-事件监听"><a href="#对property-对象添加change-值改变-事件监听" class="headerlink" title="对property 对象添加change(值改变)事件监听"></a>对property 对象添加change(值改变)事件监听</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main &#123;</span><br><span class="line">IntegerProperty counter = <span class="keyword">new</span> SimpleIntegerProperty(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// Add a change listener to the counter property</span></span><br><span class="line">counter.set(<span class="number">101</span>); <span class="comment">// 产生changeEvent</span></span><br><span class="line">counter.set(<span class="number">102</span>); <span class="comment">//产生changeEvent</span></span><br><span class="line">counter.set(<span class="number">102</span>); <span class="comment">//不产生changeEvent</span></span><br><span class="line">counter.addListener(ChangeTest::changed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(ObservableValue&lt;? extends Number&gt; prop,Number oldValue,Number newValue)</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Counter changed: "</span>);</span><br><span class="line">System.out.println(<span class="string">"Old = "</span> + oldValue + <span class="string">", new = "</span>+ newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="使用WeakListener来避免内存泄漏"><a href="#使用WeakListener来避免内存泄漏" class="headerlink" title="使用WeakListener来避免内存泄漏"></a>使用WeakListener来避免内存泄漏</h2><p>应该在对某个property添加listener. 这样这些property中就有listener的强引用，这样这些listener就很难被回收。还有一种情况就是匿名的changlistener实现，会有外部的<br>对象的引用，如果外部对象包括比较占内存的view,就很容易出现这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ChangeListener&lt;Number&gt; cListener = create a change listener...</span><br><span class="line">WeakChangeListener&lt;Number&gt; wListener = <span class="keyword">new</span> WeakChangeListener(cListener);</span><br><span class="line"><span class="comment">// Add a weak change listener, assuming that counter is a property</span></span><br><span class="line">counter.addListener(wListener);</span><br><span class="line">......</span><br><span class="line">cListener = <span class="keyword">null</span>;<span class="comment">//不需要改listener的时候</span></span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;property的概念&quot;&gt;&lt;a href=&quot;#property的概念&quot; class=&quot;headerlink&quot; title=&quot;property的概念&quot;&gt;&lt;/a&gt;property的概念&lt;/h1&gt;&lt;p&gt;一个property 通常是外部不可见的，在该类之外，我们只能通过g
      
    
    </summary>
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/categories/java-fx/"/>
    
    
      <category term="java_fx" scheme="http://truejasonfans.github.io/tags/java-fx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 文章帮助指南</title>
    <link href="http://truejasonfans.github.io/2016/10/18/instructions-of-hexo/"/>
    <id>http://truejasonfans.github.io/2016/10/18/instructions-of-hexo/</id>
    <published>2016-10-18T14:45:46.000Z</published>
    <updated>2018-04-01T13:06:40.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>一个#</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>二个#</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>三个#</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1 (*开头）</li><li>2</li><li>3</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>1 (数字加.)</li><li>2</li><li>3</li><li>4</li></ol><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>例如这样(&gt;)</p></blockquote><h4 id="插入连接"><a href="#插入连接" class="headerlink" title="插入连接"></a>插入连接</h4><p>[google] (<a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a>)</p><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"><br><a href="http://www.getcloudapp.com/" target="_blank" rel="noopener">http://www.getcloudapp.com/</a></p><p>####<br><strong>粗体是两个*包含</strong><br><em>斜体是一个包含</em></p><h4 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h4><p>需要用两个 ` 把中间的代码包裹起来</p><p><code>code</code></p><hr><p>分割线<br>分割线的语法只需要另起一行，连续输入三个星号 *** 即可。</p><hr><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>hexo 部署新change</p><p>hexo clean</p><p>hexo generate</p><p>hexo deploy</p><p>hexo new”postName” #新建文章</p><p>hexo new page”pageName” #新建页面</p><p>hexo generate #生成静态页面至public目录</p><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p>hexo deploy #将.deploy目录部署到GitHub</p><p>hexo help # 查看帮助</p><p>hexo version #查看Hexo的版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;p&gt;一个#&lt;/p&gt;
&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://truejasonfans.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据库范式</title>
    <link href="http://truejasonfans.github.io/2016/06/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/"/>
    <id>http://truejasonfans.github.io/2016/06/22/数据库范式/</id>
    <published>2016-06-22T14:11:25.000Z</published>
    <updated>2018-04-01T13:06:40.079Z</updated>
    
    <content type="html"><![CDATA[<p>刚看了一遍博客园原文讲三大范式(关系型数据库)，是我觉看到目前最通俗的版本<br>参考于<a href="http://news.cnblogs.com/n/547872/" target="_blank" rel="noopener">余晟：从范式谈起</a>.</p><h2 id="第一范式：属性不能拆分"><a href="#第一范式：属性不能拆分" class="headerlink" title="第一范式：属性不能拆分"></a>第一范式：属性不能拆分</h2><p>换句话说，表中间的任何列都应当是承载信息的最小单位，不容许有更小的单位。一个人有身高、体重、性别等等，那么身高、体重、性别都应该对应专门的列，而不能取个名为“基本信息”的列，把这些信息统统塞进去。即数据库表的每一列都是不可分割的<strong>原子数据项</strong>。这个应该比较好理解，方便数据的索引与去重。</p><h2 id="第二范式：主键必须最小"><a href="#第二范式：主键必须最小" class="headerlink" title="第二范式：主键必须最小"></a>第二范式：主键必须最小</h2><p>主键是这样的属性：对某个关系中所有n元组来说，主键必须是没有重复的，所以依靠它可以唯一定位某个n元组。主键可以是一个属性，也可以是多个属性。如果用列和表的说法，就是“唯一定位表中某行所要用到的列”。</p><p>　　假设有一个电商卖家对接到电商平台，用表来存储订单信息，如果所有订单都来自同一个平台，可以用“平台订单号”作为主键；如果来自不同平台，各平台的订单号可能会重复，所以可以用“平台+订单号”作为主键……以此类推。</p><p>　　第 2 范式的要求是：在满足第 1 范式的基础上，所有非主属性（主键之外的属性）必须<strong>完全依赖主键</strong>，而不能只依赖主键的<strong>某个子集</strong>。</p><p><img src="http://images2015.cnblogs.com/news/66372/201606/66372-20160622141042969-702810485.jpg" alt="alt text"><br>上面的表不符合第二范式，主键是“平台+订单号”，这样才能区分金额，但是“对接人邮箱”只与“平台”有关，而“平台”是“平台+订单号”的子集。<br>　　我们经常看到数据库的表会有一个毫无业务意义的自增字段作为主键，这样就保证了第二范式，因为主键只有一个属性，不存在真子集。同时，应当把非主属性和原来它依赖的“主键的子集”单独拿出来建表，比如建立一张“平台+对接人邮箱”的表格。</p><p>该范式是规定以最小的主键索引到某行数据</p><h2 id="第三范式-主键必须直接依赖"><a href="#第三范式-主键必须直接依赖" class="headerlink" title="第三范式:主键必须直接依赖"></a>第三范式:主键必须直接依赖</h2><p>　要满足第 2 范式，首先必须满足第 1 范式。同样的道理，要满足第 3 范式，首先也必须满足第 2 范式，并符合以下要求：所有非主属性对主键的依赖应当是直接的，不容许是间接的。也就是说，所有非主属性不容许依赖<strong>主键之外的属性</strong>。</p><p><img src="http://images2015.cnblogs.com/news/66372/201606/66372-20160622141043141-1497547913.jpg" alt="alt text"></p><p>上面的表不符合第三范式。主键是“平台+冠军种类”，但属性“品牌联系人邮箱”依赖于主键之外的属性“品牌”，虽然“品牌”依赖于表的主键，但“品牌联系人邮箱”对主键依赖是传递的。</p><p>　　要让表符合第 3 范式，可以解除传递依赖，把对应的属性拆分出来单独创建表，比如把“品牌”和“品牌联系人邮箱”单独创建表。<br><img src="http://images2015.cnblogs.com/news/66372/201606/66372-20160622141042906-352048073.jpg" alt="alt text"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>三大范式核心观点就是去除<strong>冗余数据</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚看了一遍博客园原文讲三大范式(关系型数据库)，是我觉看到目前最通俗的版本&lt;br&gt;参考于&lt;a href=&quot;http://news.cnblogs.com/n/547872/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;余晟：从范式谈起&lt;/a&gt;.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="数据库原理" scheme="http://truejasonfans.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JVM的一些理解总结</title>
    <link href="http://truejasonfans.github.io/2016/06/09/jvm-augments-summary/"/>
    <id>http://truejasonfans.github.io/2016/06/09/jvm-augments-summary/</id>
    <published>2016-06-09T15:15:03.000Z</published>
    <updated>2018-04-01T13:06:40.077Z</updated>
    
    <content type="html"><![CDATA[<p>jvm的<strong>堆内存模型</strong>，</p><p> jvm 堆 = 年轻代 + 持久代 + 年老代</p><p>年轻代的组成(young generation) : 一个Eden区,两个Survivor区(from 和 to 区）。</p><p>通常情况下，一个新产生的对象会被分配在Eden区，在这里当Eden区发生一次minor gc(发生在新生代的gc，我个人理解应该是对主要是对Eden的gc，当然如果to 区满了以后也会触发），对象就会从Eden区移动到from区,刚开始的时候to区是空的， 之后的gc，Eden区存活下来的对象会被移动到”to“区，然后”From区”根据年龄来决定去向，到达的年龄的去往老年代（长达成人），然后其余的全部赶往”to”区. 这次gc后Eden区和from区将会被清空，之后 “to”区 将会和“from”交换，这样下次gc的时候，”to”区就空了。这种基于复制收集的算法不会产生内存碎片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jvm的&lt;strong&gt;堆内存模型&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt; jvm 堆 = 年轻代 + 持久代 + 年老代&lt;/p&gt;
&lt;p&gt;年轻代的组成(young generation) : 一个Eden区,两个Survivor区(from 和 to 区）。&lt;/p&gt;
&lt;p&gt;通常
      
    
    </summary>
    
      <category term="java" scheme="http://truejasonfans.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://truejasonfans.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>第一篇杂记吧</title>
    <link href="http://truejasonfans.github.io/2016/05/26/hexo-01/"/>
    <id>http://truejasonfans.github.io/2016/05/26/hexo-01/</id>
    <published>2016-05-26T15:48:41.000Z</published>
    <updated>2018-04-01T13:06:40.078Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有记东西了， 那就随便写一点吧。我应该快两年没写过日志了，记得上一次还是写铜锣湾？<br>每次记点东西的时候，生活都变化有一点大，是我太懒散了。 最近上班的时候看了coolshell的博客，受益很多，<br>还是需要花些时间去沉淀自己的。我希望每一天都能成长一点，做技术这个东西就是要靠长期的积累与思考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有记东西了， 那就随便写一点吧。我应该快两年没写过日志了，记得上一次还是写铜锣湾？&lt;br&gt;每次记点东西的时候，生活都变化有一点大，是我太懒散了。 最近上班的时候看了coolshell的博客，受益很多，&lt;br&gt;还是需要花些时间去沉淀自己的。我希望每一天都能成长一点，做技
      
    
    </summary>
    
      <category term="个人生活" scheme="http://truejasonfans.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人生活随笔" scheme="http://truejasonfans.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
